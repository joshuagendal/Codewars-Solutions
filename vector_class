"""Create a Vector object that supports addition, subtraction, dot products, and norms. So, for
example:

a = Vector([1,2,3])
b = Vector([3,4,5])
c = Vector([5,6,7,8])
a.add(b) # should return Vector([4,6,8])
a.subtract(b) # should return Vector([-2,-2,-2])
a.dot(b) # should return 1*3+2*4+3*5 = 26
a.norm() # should return sqrt(1^2+2^2+3^2)=sqrt(14)
a.add(c) # raises an exception
If you try to add, subtract, or dot two vectors with different lengths, you must throw an error!

Also provide:

- a toString function, so that using the vectors from above, a.toString() === '(1,2,3)'
(in Python, this is a __str__ method, so that str(a) == '(1,2,3)')

- an equals function, so that two vectors who have the same components are equal
The test cases will utilize the user-provided equals method."""

from operator import mul

class Vector():

    def __init__(self, vector_numbers):
        self.vector_numbers = vector_numbers

    def __len__(self):
        return len(self.vector_numbers)

    def __str__(self):
        return str(self.vector_numbers)

    def add(self, vector_to_add):
        self.vector_to_add = vector_to_add
        if len(self.vector_numbers) != len(vector_to_add):
            raise ValueError('Cannot add vectors of different lengths!')
        else:
            res = map(sum, zip(self.vector_numbers, vector_to_add.vector_numbers))
            return res

    def subtract(self, vector_to_subtract):
        self.vector_to_subtract = vector_to_subtract
        if len(self.vector_numbers) != len(vector_to_subtract):
            raise ValueError('Cannot subtract vectors of different lengths!')
        else:
            return [a_i - b_i for a_i, b_i in zip(self.vector_numbers, vector_to_subtract.vector_numbers)]

    def dot(self, vector_to_dot):
        self.vector_to_dot = vector_to_dot
        if len(self.vector_numbers) != len(vector_to_dot):
            raise ValueError('Length of the vectors are not equal')
        else:
            return sum(map(mul, self.vector_numbers, vector_to_dot.vector_numbers))

    def norm(self):
        return sum(i*i for i in self.vector_numbers)


    def equals(self):
        if isinstance(self.vector_numbers, Vector):
            return False
